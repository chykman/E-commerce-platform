name: CI/CD Pipeline

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Install backend dependencies
      - name: Install backend dependencies
        working-directory: ./server
        run: npm install

      # Run backend tests
      - name: Run backend tests
        working-directory: ./server
        run: npm test

      # Install frontend dependencies
      - name: Install frontend dependencies
        working-directory: ./public
        run: npm install

      # Build frontend React app
      - name: Build frontend
        working-directory: ./public
        run: npm run build


        
  
      # Build and Push Docker Images

      - name : Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          tags: chykmanish/ecommerce-app-backend:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./public
          file: ./public/Dockerfile
          push: true
          tags: chykmanish/ecommerce-app-frontend:latest


     

  deploy-to-ec2:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu  # Use consistent username
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Install Docker (skip if already installed)
            if ! command -v docker &> /dev/null; then
              sudo apt-get update
              sudo apt-get install -y docker.io
              sudo systemctl start docker
              sudo systemctl enable docker
            fi
            
            # Install Docker Compose
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -L "https://github.com/docker/compose/releases/download/v2.20.3/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            # Add user to docker group
            sudo usermod -aG docker ubuntu
            # No need for newgrp - will take effect on next login



      - name: Copy Docker-Compose to EC2
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu  # Consistent username
          key: ${{ secrets.EC2_SSH_KEY }}
          source: "docker-compose.yml"
          target: "/home/ubuntu/"

      - name: Deploy Containers
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu  # Consistent username
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Clean up old containers
            docker-compose down || true
            
            # Pull latest images
            docker pull chykmanish/ecommerce-app-backend:latest
            docker pull chykmanish/ecommerce-app-frontend:latest
            
            # Start new containers
            docker-compose up -d

            # Check if containers are running
            docker ps

      - name: Notify Deployment Success to whatsapp
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu  # Consistent username
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            # Send WhatsApp notification using curl
            curl -X POST "https://api.callmebot.com/whatsapp.php?phone=${{ secrets.WHATSAPP_PHONE }}&text=Deployment%20successful!%20Your%20eCommerce%20app%20is%20now%20live.%20Visit%20it%20at%20http://your-ec2-ip-address" -H "Content-Type: application/json"