name: CI/CD Pipeline

on:
  push:
    branches: [main]

jobs:
  build-and-test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      # Backend
      - name: Install backend dependencies
        working-directory: ./server
        run: npm install

      - name: Run backend tests
        working-directory: ./server
        run: npm test

      # Frontend
      - name: Install frontend dependencies
        working-directory: ./public
        run: npm install

      - name: Build frontend
        working-directory: ./public
        run: npm run build

      # Docker
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build and push Backend image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./server/Dockerfile
          push: true
          tags: chykmanish/ecommerce-app-backend:latest

      - name: Build and push Frontend image
        uses: docker/build-push-action@v4
        with:
          context: ./public
          file: ./public/Dockerfile
          push: true
          tags: chykmanish/ecommerce-app-frontend:latest

  deploy-to-ec2:
    needs: build-and-test
    runs-on: ubuntu-latest
    steps:
      # SSH Key Setup (Critical Fix)
      - name: Setup SSH Key
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.EC2_SSH_KEY }}" > ~/.ssh/ec2_key
          chmod 600 ~/.ssh/ec2_key
          ssh-keyscan ${{ secrets.EC2_IP_ADDRESS }} >> ~/.ssh/known_hosts

      # Docker Installation
      - name: Install Docker on EC2
        uses: appleboy/ssh-action@v0.1.10
        env:
          SSH_KEY: ${{ secrets.EC2_SSH_KEY }}
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu
          key: ${{ env.SSH_KEY }}
          script: |
            set -e  # Exit on error
            echo "=== Setting up Docker ==="
            if ! command -v docker &> /dev/null; then
              sudo apt-get update -qq
              sudo apt-get install -y docker.io
              sudo systemctl enable --now docker
            fi
            
            if ! command -v docker-compose &> /dev/null; then
              sudo curl -fsSL "https://github.com/docker/compose/releases/latest/download/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
              sudo chmod +x /usr/local/bin/docker-compose
            fi
            
            sudo usermod -aG docker ubuntu
            docker --version
            docker-compose --version

      # Deployment
      - name: Deploy Application
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.EC2_IP_ADDRESS }}
          username: ubuntu
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            set -e
            echo "=== Deploying Application ==="
            cd /home/ubuntu
            
            # Stop and clean up old containers
            docker-compose down || true
            
            # Pull latest images
            docker pull chykmanish/ecommerce-app-backend:latest
            docker pull chykmanish/ecommerce-app-frontend:latest
            
            # Start new containers
            docker-compose up -d
            
            # Verify deployment
            echo "=== Running Containers ==="
            docker ps
            echo "=== Deployment Complete ==="

      # Notification (Improved)
      - name: Send WhatsApp Notification
        if: success()  # Only send on successful deployment
        run: |
          EC2_IP=${{ secrets.EC2_IP_ADDRESS }}
          PHONE=${{ secrets.WHATSAPP_PHONE }}
          MESSAGE="âœ… Deployment Successful! Access your app at: http://$EC2_IP"
          
          curl -X POST \
            "https://api.callmebot.com/whatsapp.php?phone=$PHONE&text=$(echo $MESSAGE | sed 's/ /%20/g')" \
            -H "Cache-Control: no-cache"